[{"/Users/avgx/soft/personal2/kyojin-editor/src/index.tsx":"1","/Users/avgx/soft/personal2/kyojin-editor/src/reportWebVitals.ts":"2","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/App.tsx":"3","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/KyojinEditor.tsx":"4","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/TaskAdd.tsx":"5","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/AudioTaskEditor.tsx":"6","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/TextTaskEditor.tsx":"7","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/ImageTaskEditor.tsx":"8","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/QuickTestTaskEditor.tsx":"9","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/TestTaskEditor.tsx":"10","/Users/avgx/soft/personal2/kyojin-editor/src/components/kyojin/types.ts":"11","/Users/avgx/soft/personal2/kyojin-editor/src/components/kyojin/model.ts":"12","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/Raw.tsx":"13"},{"size":515,"mtime":1612594707573,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1611525462248,"results":"16","hashOfConfig":"15"},{"size":520,"mtime":1612599568708,"results":"17","hashOfConfig":"15"},{"size":9210,"mtime":1612616033297,"results":"18","hashOfConfig":"15"},{"size":2313,"mtime":1612609879081,"results":"19","hashOfConfig":"15"},{"size":5910,"mtime":1612614863095,"results":"20","hashOfConfig":"15"},{"size":4799,"mtime":1612614863097,"results":"21","hashOfConfig":"15"},{"size":3555,"mtime":1612614863096,"results":"22","hashOfConfig":"15"},{"size":1347,"mtime":1612609683815,"results":"23","hashOfConfig":"15"},{"size":1337,"mtime":1612609683815,"results":"24","hashOfConfig":"15"},{"size":828,"mtime":1612609583256,"results":"25","hashOfConfig":"15"},{"size":363,"mtime":1612614013316,"results":"26","hashOfConfig":"15"},{"size":2223,"mtime":1612615154612,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"qqd5cw",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"30"},"/Users/avgx/soft/personal2/kyojin-editor/src/index.tsx",[],["65","66"],"/Users/avgx/soft/personal2/kyojin-editor/src/reportWebVitals.ts",[],"/Users/avgx/soft/personal2/kyojin-editor/src/components/app/App.tsx",["67"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport KyojinEditor from './KyojinEditor';\nimport { Kyojin } from '../kyojin/model';\n\nfunction App() {\n\n  const [kyojins, setKyojins] = React.useState<Kyojin[]>([]);\n\n  const handleKyojinChange = (value: Kyojin) => {\n    setKyojins([value]);\n  };\n\n  return (\n    <div className=\"App\">\n      <KyojinEditor \n        //editId={null}\n        kyojins={kyojins}\n        onChange={handleKyojinChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/KyojinEditor.tsx",["68","69","70"],"import React from 'react';\nimport { Kyojin, KyojinTypeVersion } from '../kyojin/model';\nimport { v4 as uuidv4 } from \"uuid\";\nimport moment from 'moment';\nimport FileSaver from \"file-saver\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { IdString, TaskType, UrlString } from '../kyojin/types';\nimport { AppBar, Box, Grid, IconButton, Paper, TextField, Toolbar, Tooltip, Typography } from '@material-ui/core';\nimport { title } from 'process';\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport TaskAdd from './TaskAdd';\nimport Raw from './Raw';\nimport AudioTaskEditor from './taskeditor/AudioTaskEditor';\nimport TextTaskEditor from './taskeditor/TextTaskEditor';\nimport ImageTaskEditor from './taskeditor/ImageTaskEditor';\nimport TestTaskEditor from './taskeditor/TestTaskEditor';\nimport QuickTestTaskEditor from './taskeditor/QuickTestTaskEditor';\nimport { Task } from '../kyojin/tasks';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    // root: {\n    //   '& .MuiTextField-root': {\n    //     margin: theme.spacing(1),\n    //     width: '25ch',\n    //   },\n    // },\n    root: {\n      flexGrow: 1,\n    },\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\ntype Props = {\n  editId?: string | undefined;\n  kyojins: Kyojin[];\n  onChange: (value: Kyojin) => void;\n};\n\nfunction KyojinEditor(props: Props) {\n  const classes = useStyles();\n  const now = new Date();\n  const rev = moment(now).format(\"YYYYMMDDTHHmmss\");\n\n  const editKyojin = !!props.editId ? props.kyojins.find(w => w.id === props.editId) : undefined;\n\n  const [id, setId] = React.useState<string>(editKyojin?.id ?? uuidv4());\n  const [revision, setRevision] = React.useState<string>(editKyojin?.revision ?? rev);\n  const [name, setName] = React.useState<string | undefined>(editKyojin?.name);\n  const [image, setImage] = React.useState<UrlString | undefined>(editKyojin?.image);\n  const [tasks, setTasks] = React.useState<Task[]>(editKyojin?.tasks ?? []);\n\n  //const [description, setDescription] = React.useState<string | undefined>(props.value?.description ?? undefined);\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setRevision(moment(new Date()).format(\"YYYYMMDDTHHmmss\"));\n  };\n  const handleChangeImage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImage(event.target.value);\n    setRevision(moment(new Date()).format(\"YYYYMMDDTHHmmss\"));\n  };\n  const handleAddTask = (tasktype: TaskType) => {\n    let task: Task = {\n      id: uuidv4(),\n      tasktype: tasktype,\n    };\n    setTasks(tasks.concat([task]));\n    setRevision(moment(new Date()).format(\"YYYYMMDDTHHmmss\"));\n  };\n  const handleDeleteTask = (id: IdString) => {\n    setTasks(tasks.filter(t => t.id !== id));\n    setRevision(moment(new Date()).format(\"YYYYMMDDTHHmmss\"));\n  };\n\n  const handleEditTask = (task: Task) => {\n    setTasks(tasks.map(t => t.id !== task.id ? t : task));\n    setRevision(moment(new Date()).format(\"YYYYMMDDTHHmmss\"));\n  };\n\n  const handleClickDownload = () => {\n    if (!name) {\n      console.log(\"no name\");\n      return;\n    }\n    if (!image) {\n      console.log(\"no image\");\n      return;\n    }\n    if (!tasks || tasks.length === 0) {\n      console.log(\"no tasks\");\n      return;\n    }\n    const kyojin: Kyojin = {\n      v: KyojinTypeVersion.v1,\n      id: id,\n      revision: rev,\n      name: name!,\n      image: image!,\n      tasks: tasks\n    };\n    const kyojinString = JSON.stringify(kyojin, undefined, 2);\n\n    let kyojinBlob = new Blob([kyojinString], {\n      type: \"application/json;charset=utf-8\",\n    });\n    FileSaver.saveAs(kyojinBlob, kyojin.name + \".\" + kyojin.revision + \".json\");\n  };\n\n  const handleRaw = (raw: string) => {\n    const x: Kyojin = JSON.parse(raw);\n    if (!x) {\n      //TODO: показать всплывайку\n      return;\n    }\n    \n    setId(x.id);\n    setRevision(x.revision);\n    setName(x.name);\n    setImage(x.image);    \n    setTasks(x.tasks);    \n  };\n\n  const now1 = new Date();\n  const rev1 = moment(now1).format(\"YYYYMMDDTHHmmss\");\n  const kyojin1: Kyojin = {\n    v: KyojinTypeVersion.v1,\n    id: id,\n    revision: rev,\n    name: name ?? \"\",\n    image: image ?? \"\",\n    tasks: tasks\n  };\n  \n  return (\n    <div>\n      <Box display=\"block\" displayPrint=\"none\">\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\">\n            <Typography variant=\"h6\" key=\"appTitle\" className={classes.title}>\n              Редактор великанов\n            </Typography>\n            <Raw\n              isReadonly={false}\n              raw={JSON.stringify(kyojin1, undefined, 2)}\n              onChangeRaw={handleRaw}\n            />\n            <Tooltip title=\"Скачать\">\n              <IconButton\n                edge=\"end\"\n                color=\"inherit\"\n                aria-label=\"Скачать\"\n                onClick={handleClickDownload}\n              >\n                <GetAppIcon />\n              </IconButton>\n            </Tooltip>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Box>\n        <Typography>&nbsp;</Typography>\n        <Grid container spacing={2} alignItems=\"stretch\">\n          <Grid item xs={12} key=\"name\">\n            <TextField\n              id=\"title-text\"\n              size=\"small\"\n              label=\"Имя\"\n              value={name ?? \"\"}\n              onChange={handleChangeName}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} key=\"version\">\n            <TextField\n              id=\"title-text\"\n              size=\"small\"\n              label=\"Версия\"\n              value={revision ?? \"\"}\n              fullWidth\n              variant=\"outlined\"\n              disabled\n            />\n          </Grid>\n          <Grid item xs={12} key=\"image\">\n            <TextField\n              id=\"title-text\"\n              size=\"small\"\n              label=\"Изображение (ссылка)\"\n              value={image ?? \"\"}\n              onChange={handleChangeImage}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} key=\"taskadd\">\n            <TaskAdd\n              onAddTask={handleAddTask}\n            />\n          </Grid>\n          <Grid item xs={12} key=\"tasks\">\n            <Grid container spacing={2} alignItems=\"stretch\">\n              {tasks.map(t => {\n                switch (t.tasktype) {\n                  case \"audio\":\n                    return (\n                      <Grid item xs={12} sm={6} key={t.id}>\n                        <AudioTaskEditor\n                          id={t.id}\n                          tasktype={t.tasktype}\n                          task={t}\n                          onEditTask={handleEditTask}\n                          onDeleteTask={handleDeleteTask}\n                        />\n                      </Grid>\n\n                    );\n                  case \"text\":\n                    return (\n                      <Grid item xs={12} sm={6} key={t.id}>\n                        <TextTaskEditor\n                          id={t.id}\n                          tasktype={t.tasktype}\n                          task={t}\n                          onEditTask={handleEditTask}\n                          onDeleteTask={handleDeleteTask}\n                        />\n                      </Grid>\n                    );\n                  case \"image\":\n                    return (\n                      <Grid item xs={12} sm={6} key={t.id}>\n                        <ImageTaskEditor\n                          id={t.id}\n                          tasktype={t.tasktype}\n                          task={t}\n                          onEditTask={handleEditTask}\n                          onDeleteTask={handleDeleteTask}\n                        />\n                      </Grid>\n                    );\n                  case \"quicktest\":\n                    return (\n                      <Grid item xs={12} sm={6} key={t.id}>\n                        <QuickTestTaskEditor\n                          id={t.id}\n                          tasktype={t.tasktype}\n                          task={t}\n                          onDeleteTask={handleDeleteTask}\n                        />\n                      </Grid>\n                    );\n                  case \"test\":\n                    return (\n                      <Grid item xs={12} sm={6} key={t.id}>\n                        <TestTaskEditor\n                          id={t.id}\n                          tasktype={t.tasktype}\n                          task={t}\n                          onDeleteTask={handleDeleteTask}\n                        />\n                      </Grid>\n                    );\n                  default:\n                    return (\n                      <Typography>{t.id} - {t.tasktype}</Typography>\n                    );\n                }\n              })}\n            </Grid>\n\n          </Grid>\n        </Grid>\n\n      </Box>\n\n    </div>\n  );\n}\n\nexport default KyojinEditor;","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/TaskAdd.tsx",["71","72","73","74","75","76"],"import * as React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport AddCircleOutlineOutlinedIcon from \"@material-ui/icons/AddCircleOutlineOutlined\";\nimport { Paper, Typography, IconButton, Menu, List, ListSubheader, MenuItem, Grid, Divider } from \"@material-ui/core\";\nimport { Task } from \"../kyojin/tasks\";\nimport { TaskType, tr_TaskType } from \"../kyojin/types\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      backgroundColor: theme.palette.background.paper,\n    },\n  })\n);\n\ntype Props = {  \n  onAddTask: (item: TaskType) => void;  \n};\n\nfunction TaskAdd(props: Props) {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const classes = useStyles();\n\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleAdd = (item: TaskType) => () => {\n    props.onAddTask(item);\n    setAnchorEl(null);\n  };\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Paper\n      variant=\"elevation\"\n      elevation={0}\n    >\n      <Typography variant=\"h6\">\n      Задания\n        <IconButton\n          edge=\"end\"\n          aria-label=\"task\"\n          onClick={handleOpenMenu}\n          title=\"Новое задание\"\n        >\n          <AddCircleOutlineOutlinedIcon />\n        </IconButton>\n      </Typography>\n\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleCloseMenu}\n      >\n        {[\"audio\", \"text\", \"quicktest\", \"test\", \"image\"].map(t => t as TaskType).map(tt => (\n          <MenuItem key={tt} onClick={handleAdd(tt)}>{tr_TaskType(tt)}</MenuItem>\n        ))}\n        {/* <MenuItem key=\"audio\" onClick={handleAdd(\"audio\")}>{tr_TaskType(\"audio\")}</MenuItem>\n        <MenuItem key=\"text\" onClick={handleAdd(\"text\")}>Статья / История</MenuItem>\n        <MenuItem key=\"quicktest\" onClick={handleAdd(\"quicktest\")}>Быстрый тест</MenuItem>\n        <MenuItem key=\"test\" onClick={handleAdd(\"test\")}>Тест</MenuItem>\n        <MenuItem key=\"image\" onClick={handleAdd(\"image\")}>Картинка</MenuItem>         */}\n      </Menu>\n    </Paper>\n  );\n}\n\nexport default TaskAdd;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/AudioTaskEditor.tsx",["77","78","79"],"import React, { version } from \"react\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Card, CardContent, CardActions, IconButton, Typography, CardHeader, Grid, TextField, MenuItem } from \"@material-ui/core\";\nimport { AudioTask, Task } from \"../../kyojin/tasks\";\nimport { IdString, TaskType, AudioType, UrlString, tr_TaskType } from \"../../kyojin/types\";\n\ntype Props = {\n  id: IdString;\n  tasktype: TaskType;\n  task: Partial<AudioTask>;\n\n  onEditTask?: ((task: Task) => void) | undefined;\n  onDeleteTask?: ((id: IdString) => void) | undefined;\n};\n\nfunction AudioTaskEditor(props: Props) {\n\n  const type = props.task?.type;\n  const audio = props.task?.audio;\n\n  const title = props.task?.title;\n  const brief = props.task?.brief;\n  const image = props.task?.image;\n\n  //TODO: detail: TextContent[];  //тест в формате MD перемежается со ссылками на картинки\n  //const [duration_in_min, setDuration_in_min] = React.useState<number | undefined>(props.task?.duration_in_min);\n\n  const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value as AudioType;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        type: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n  const handleChangeAudio = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value as UrlString;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        audio: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {    \n    const v = event.target.value;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        title: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n  const handleChangeBrief = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        brief: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n  const handleChangeImage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        image: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n\n  const handleDelete = () => {\n    console.log(\"handleDelete \" + props.id);\n    if (props.onDeleteTask) {\n      props.onDeleteTask(props.id);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        action={\n          <IconButton aria-label=\"delete\" onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        }\n        title={tr_TaskType(props.tasktype)}\n        subheader={\n          <>\n            <Typography color=\"textSecondary\">{props.id}</Typography>\n          </>\n        }\n      />\n\n      <CardContent>\n        <Grid container spacing={2} alignItems=\"stretch\">\n          <Grid item xs={12}>\n            <TextField\n              id=\"title\"\n              size=\"small\"\n              label=\"Тип\"\n              select\n              value={type ?? \"\"}\n              onChange={handleChangeType}\n              fullWidth\n              required\n              variant=\"outlined\"\n            >\n              <MenuItem key=\"unknown\" value=\"\"></MenuItem>\n              <MenuItem key=\"meditation\" value=\"meditation\">Медитация</MenuItem>\n              <MenuItem key=\"breathe\" value=\"breathe\">Дыхание</MenuItem>\n              <MenuItem key=\"sleep\" value=\"sleep\">Сон</MenuItem>\n              <MenuItem key=\"background\" value=\"background\">Фоновая музыка</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"image\"\n              size=\"small\"\n              label=\"Mp3 файл\"\n              helperText=\"URL / ссылка на доступный по http/https файл\"\n              value={audio ?? \"\"}\n              onChange={handleChangeAudio}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"title\"\n              size=\"small\"\n              label=\"Заголовок\"\n              helperText=\"Если пусто, берётся из метаданных mp3\"\n              value={title ?? \"\"}\n              onChange={handleChangeTitle}\n              fullWidth\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"brief\"\n              size=\"small\"\n              label=\"Краткое содержание\"\n              helperText=\"Если пусто, берётся из метаданных mp3\"\n              value={brief ?? \"\"}\n              onChange={handleChangeBrief}\n              fullWidth\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"image\"\n              size=\"small\"\n              label=\"Изображение (ссылка)\"\n              helperText=\"Если пусто, берётся из метаданных mp3\"\n              value={image ?? \"\"}\n              onChange={handleChangeImage}\n              fullWidth\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n\n    </Card>\n  );\n}\n\nexport default AudioTaskEditor;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/TextTaskEditor.tsx",["80","81","82"],"import React, { version } from \"react\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Card, CardContent, CardActions, IconButton, Typography, CardHeader, Grid, TextField, MenuItem } from \"@material-ui/core\";\nimport { TextTask } from \"../../kyojin/tasks\";\nimport { IdString, TaskType, TextType, tr_TaskType, UrlString } from \"../../kyojin/types\";\n\ntype Props = {\n  id: IdString;\n  tasktype: TaskType;\n  task: Partial<TextTask>;\n\n  onEditTextTask?: ((task: TextTask) => void) | undefined;\n  onDeleteTask?: ((id: IdString) => void) | undefined;\n};\n\nfunction TextTaskEditor(props: Props) {\n\n  const [type, setType] = React.useState<TextType | undefined>(undefined);\n  const [title, setTitle] = React.useState<string | undefined>(props.task?.title);\n  const [brief, setBrief] = React.useState<string | undefined>(props.task?.brief);\n  const [image, setImage] = React.useState<UrlString | undefined>(props.task?.image);\n  //TODO: detail: TextContent[];  //тест в формате MD перемежается со ссылками на картинки\n  //const [duration_in_min, setDuration_in_min] = React.useState<number | undefined>(props.task?.duration_in_min);\n\n  const handleChangeType = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setType(event.target.value as TextType);\n  };\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n  const handleChangeBrief = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBrief(event.target.value);\n  };\n  const handleChangeImage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImage(event.target.value);\n  };\n\n\n  const handleDelete = () => {\n    console.log(\"handleDelete \" + props.id);\n    if (props.onDeleteTask) {\n      props.onDeleteTask(props.id);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        action={\n          <IconButton aria-label=\"delete\" onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        }\n        title={tr_TaskType(props.tasktype)}\n        subheader={\n          <>\n            <Typography color=\"textSecondary\">{props.id}</Typography>\n          </>\n        }\n      />\n\n      <CardContent>\n        <Grid container spacing={2} alignItems=\"stretch\">\n          <Grid item xs={12}>\n            <TextField\n              id=\"title\"\n              size=\"small\"\n              label=\"Тип\"\n              select\n              value={type ?? \"\"}\n              onChange={handleChangeType}\n              fullWidth\n              required\n              variant=\"outlined\"\n            >\n              <MenuItem key=\"unknown\" value=\"\"></MenuItem>\n              <MenuItem key=\"article\" value=\"article\">Статья</MenuItem>\n              <MenuItem key=\"tale\" value=\"tale\">История</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"title\"\n              size=\"small\"\n              label=\"Заголовок\"\n              value={title ?? \"\"}\n              onChange={handleChangeTitle}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"brief\"\n              size=\"small\"\n              label=\"Краткое содержание\"\n              value={brief ?? \"\"}\n              onChange={handleChangeBrief}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"image\"\n              size=\"small\"\n              label=\"Изображение (ссылка)\"\n              helperText=\"URL / ссылка на доступный по http/https файл\"\n              value={image ?? \"\"}\n              onChange={handleChangeImage}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n\n    </Card>\n  );\n}\n\nexport default TextTaskEditor;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/ImageTaskEditor.tsx",["83","84","85","86","87","88"],"import React, { version } from \"react\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Card, CardContent, CardActions, IconButton, Typography, CardHeader, Grid, TextField, MenuItem } from \"@material-ui/core\";\nimport { ImageTask, Task } from \"../../kyojin/tasks\";\nimport { IdString, TaskType, TextType, tr_TaskType, UrlString } from \"../../kyojin/types\";\n\ntype Props = {\n  id: IdString;\n  tasktype: TaskType;\n  task: Partial<ImageTask>;\n\n  onEditTask?: ((task: Task) => void) | undefined;\n  onDeleteTask?: ((id: IdString) => void) | undefined;\n};\n\nfunction ImageTaskEditor(props: Props) {\n\n  const title = props.task?.title;\n  const brief = props.task?.brief;\n  const image = props.task?.image;\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {    \n    const v = event.target.value;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        title: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n  const handleChangeBrief = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        brief: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n  const handleChangeImage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = event.target.value;\n    if (props.onEditTask) {\n      const t = {\n        ...props.task,\n        image: v\n      };\n      props.onEditTask(t as Task);  //TODO: вероятно надо чтоб было наследование\n    }\n  };\n\n\n  const handleDelete = () => {\n    console.log(\"handleDelete \" + props.id);\n    if (props.onDeleteTask) {\n      props.onDeleteTask(props.id);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        action={\n          <IconButton aria-label=\"delete\" onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        }\n        title={tr_TaskType(props.tasktype)}\n        subheader={\n          <>\n            <Typography color=\"textSecondary\">{props.id}</Typography>\n          </>\n        }\n      />\n\n      <CardContent>\n        <Grid container spacing={2} alignItems=\"stretch\">\n          <Grid item xs={12}>\n            <TextField\n              id=\"title\"\n              size=\"small\"\n              label=\"Заголовок\"\n              value={title ?? \"\"}\n              onChange={handleChangeTitle}\n              fullWidth\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"brief\"\n              size=\"small\"\n              label=\"Краткое содержание\"\n              value={brief ?? \"\"}\n              onChange={handleChangeBrief}\n              fullWidth\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"image\"\n              size=\"small\"\n              label=\"Изображение (ссылка)\"\n              helperText=\"URL / ссылка на доступный по http/https файл\"\n              value={image ?? \"\"}\n              onChange={handleChangeImage}\n              fullWidth\n              required\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n\n    </Card>\n  );\n}\n\nexport default ImageTaskEditor;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/QuickTestTaskEditor.tsx",["89","90","91","92","93","94","95","96"],"import React, { version } from \"react\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Card, CardContent, CardActions, IconButton, Typography, CardHeader, Grid, TextField, MenuItem } from \"@material-ui/core\";\nimport { TextTask } from \"../../kyojin/tasks\";\nimport { IdString, TaskType, TextType, tr_TaskType, UrlString } from \"../../kyojin/types\";\n\ntype Props = {\n  id: IdString;\n  tasktype: TaskType;\n  task: Partial<TextTask>;\n\n  onEditTextTask?: ((task: TextTask) => void) | undefined;\n  onDeleteTask?: ((id: IdString) => void) | undefined;\n};\n\nfunction QuickTestTaskEditor(props: Props) {\n\n  const handleDelete = () => {\n    console.log(\"handleDelete \" + props.id);\n    if (props.onDeleteTask) {\n      props.onDeleteTask(props.id);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        action={\n          <IconButton aria-label=\"delete\" onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        }\n        title={tr_TaskType(props.tasktype)}\n        subheader={\n          <>\n            <Typography color=\"textSecondary\">{props.id}</Typography>\n          </>\n        }\n      />\n\n      <CardContent>\n        <Typography>TODO: доделать</Typography>\n      </CardContent>\n\n    </Card>\n  );\n}\n\nexport default QuickTestTaskEditor;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/app/taskeditor/TestTaskEditor.tsx",["97","98","99","100","101","102","103","104"],"import React, { version } from \"react\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Card, CardContent, CardActions, IconButton, Typography, CardHeader, Grid, TextField, MenuItem } from \"@material-ui/core\";\nimport { TextTask } from \"../../kyojin/tasks\";\nimport { IdString, TaskType, TextType, tr_TaskType, UrlString } from \"../../kyojin/types\";\n\ntype Props = {\n  id: IdString;\n  tasktype: TaskType;\n  task: Partial<TextTask>;\n\n  onEditTextTask?: ((task: TextTask) => void) | undefined;\n  onDeleteTask?: ((id: IdString) => void) | undefined;\n};\n\nfunction TestTaskEditor(props: Props) {\n\n  const handleDelete = () => {\n    console.log(\"handleDelete \" + props.id);\n    if (props.onDeleteTask) {\n      props.onDeleteTask(props.id);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        action={\n          <IconButton aria-label=\"delete\" onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        }\n        title={tr_TaskType(props.tasktype)}\n        subheader={\n          <>\n            <Typography color=\"textSecondary\">{props.id}</Typography>\n          </>\n        }\n      />\n\n      <CardContent>\n        <Typography>TODO: доделать</Typography>\n      </CardContent>\n\n    </Card>\n  );\n}\n\nexport default TestTaskEditor;\n","/Users/avgx/soft/personal2/kyojin-editor/src/components/kyojin/types.ts",[],["105","106"],"/Users/avgx/soft/personal2/kyojin-editor/src/components/kyojin/model.ts",[],"/Users/avgx/soft/personal2/kyojin-editor/src/components/app/Raw.tsx",["107"],"import * as React from \"react\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport { Tooltip, IconButton, Dialog, DialogTitle, DialogContent, TextField, DialogActions, Button } from \"@material-ui/core\";\nimport { lang } from \"moment\";\n\ntype Props = {\n  isReadonly: boolean;\n  raw: string;\n  onChangeRaw: (raw: string) => void;\n};\n\nfunction Raw(props: Props) {\n  const [open, setOpen] = React.useState(false);\n  const [rawValue, setRawValue] = React.useState(\"\");\n\n  const handleSelectRawValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value && event.target.value !== \"\" ? event.target.value : \"\";\n    console.log(\"new rawValue \" + newValue);\n    setRawValue(newValue);\n  };\n\n  const handleClickRawOpen = () => {\n    setOpen(true);\n    setRawValue(props.raw);\n  };\n\n  const handleRawCancel = () => {\n    setOpen(false);\n    setRawValue(\"\");\n  };\n\n  const handleRawSet = () => {\n    setOpen(false);\n\n    props.onChangeRaw(rawValue);\n    setRawValue(\"\");\n  };\n\n  return (\n    <div>\n      <Tooltip title=\"Show the full source. Copy/Paste enabled.\">\n        <IconButton\n          aria-label=\"raw\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n          onClick={handleClickRawOpen}\n        >\n          <CodeIcon />\n        </IconButton>\n      </Tooltip>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        fullWidth\n        aria-labelledby=\"confirmation-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"confirmation-dialog-title\">Raw</DialogTitle>\n        <DialogContent dividers>\n          <TextField\n            id=\"value-textfield\"\n            label=\"Value\"\n            size=\"small\"\n            fullWidth\n            multiline\n            value={rawValue}\n            onChange={handleSelectRawValue}\n            variant=\"outlined\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleRawCancel} color=\"primary\">Cancel</Button>\n          <Button\n            onClick={handleRawSet}\n            color=\"primary\"\n            disabled={props.isReadonly}>Set</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default Raw;\n",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":12},{"ruleId":"112","severity":1,"message":"116","line":8,"column":41,"nodeType":"114","messageId":"115","endLine":8,"endColumn":46},{"ruleId":"112","severity":1,"message":"117","line":9,"column":10,"nodeType":"114","messageId":"115","endLine":9,"endColumn":15},{"ruleId":"112","severity":1,"message":"118","line":135,"column":9,"nodeType":"114","messageId":"115","endLine":135,"endColumn":13},{"ruleId":"112","severity":1,"message":"119","line":4,"column":47,"nodeType":"114","messageId":"115","endLine":4,"endColumn":51},{"ruleId":"112","severity":1,"message":"120","line":4,"column":53,"nodeType":"114","messageId":"115","endLine":4,"endColumn":66},{"ruleId":"112","severity":1,"message":"121","line":4,"column":78,"nodeType":"114","messageId":"115","endLine":4,"endColumn":82},{"ruleId":"112","severity":1,"message":"122","line":4,"column":84,"nodeType":"114","messageId":"115","endLine":4,"endColumn":91},{"ruleId":"112","severity":1,"message":"123","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":14},{"ruleId":"112","severity":1,"message":"124","line":23,"column":9,"nodeType":"114","messageId":"115","endLine":23,"endColumn":16},{"ruleId":"112","severity":1,"message":"125","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":24},{"ruleId":"112","severity":1,"message":"126","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":4,"column":29,"nodeType":"114","messageId":"115","endLine":4,"endColumn":40},{"ruleId":"112","severity":1,"message":"125","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":24},{"ruleId":"112","severity":1,"message":"126","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":4,"column":29,"nodeType":"114","messageId":"115","endLine":4,"endColumn":40},{"ruleId":"112","severity":1,"message":"125","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":24},{"ruleId":"112","severity":1,"message":"126","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":4,"column":29,"nodeType":"114","messageId":"115","endLine":4,"endColumn":40},{"ruleId":"112","severity":1,"message":"128","line":4,"column":95,"nodeType":"114","messageId":"115","endLine":4,"endColumn":103},{"ruleId":"112","severity":1,"message":"129","line":6,"column":30,"nodeType":"114","messageId":"115","endLine":6,"endColumn":38},{"ruleId":"112","severity":1,"message":"130","line":6,"column":53,"nodeType":"114","messageId":"115","endLine":6,"endColumn":62},{"ruleId":"112","severity":1,"message":"125","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":24},{"ruleId":"112","severity":1,"message":"126","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":4,"column":29,"nodeType":"114","messageId":"115","endLine":4,"endColumn":40},{"ruleId":"112","severity":1,"message":"121","line":4,"column":78,"nodeType":"114","messageId":"115","endLine":4,"endColumn":82},{"ruleId":"112","severity":1,"message":"131","line":4,"column":84,"nodeType":"114","messageId":"115","endLine":4,"endColumn":93},{"ruleId":"112","severity":1,"message":"128","line":4,"column":95,"nodeType":"114","messageId":"115","endLine":4,"endColumn":103},{"ruleId":"112","severity":1,"message":"129","line":6,"column":30,"nodeType":"114","messageId":"115","endLine":6,"endColumn":38},{"ruleId":"112","severity":1,"message":"130","line":6,"column":40,"nodeType":"114","messageId":"115","endLine":6,"endColumn":49},{"ruleId":"112","severity":1,"message":"125","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":24},{"ruleId":"112","severity":1,"message":"126","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":4,"column":29,"nodeType":"114","messageId":"115","endLine":4,"endColumn":40},{"ruleId":"112","severity":1,"message":"121","line":4,"column":78,"nodeType":"114","messageId":"115","endLine":4,"endColumn":82},{"ruleId":"112","severity":1,"message":"131","line":4,"column":84,"nodeType":"114","messageId":"115","endLine":4,"endColumn":93},{"ruleId":"112","severity":1,"message":"128","line":4,"column":95,"nodeType":"114","messageId":"115","endLine":4,"endColumn":103},{"ruleId":"112","severity":1,"message":"129","line":6,"column":30,"nodeType":"114","messageId":"115","endLine":6,"endColumn":38},{"ruleId":"112","severity":1,"message":"130","line":6,"column":40,"nodeType":"114","messageId":"115","endLine":6,"endColumn":49},{"ruleId":"108","replacedBy":"132"},{"ruleId":"110","replacedBy":"133"},{"ruleId":"112","severity":1,"message":"134","line":4,"column":10,"nodeType":"114","messageId":"115","endLine":4,"endColumn":14},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'title' is defined but never used.","'rev1' is assigned a value but never used.","'List' is defined but never used.","'ListSubheader' is defined but never used.","'Grid' is defined but never used.","'Divider' is defined but never used.","'Task' is defined but never used.","'classes' is assigned a value but never used.","'version' is defined but never used.","'EditIcon' is defined but never used.","'CardActions' is defined but never used.","'MenuItem' is defined but never used.","'TextType' is defined but never used.","'UrlString' is defined but never used.","'TextField' is defined but never used.",["135"],["136"],"'lang' is defined but never used.","no-global-assign","no-unsafe-negation"]